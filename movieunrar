#!/usr/bin/perl -w

use File::Find;
use Getopt::Long;
use File::Basename;

my $USAGE = <<USAGE_END;
Usage: $0 [options]

  Searches for RAR files in a directory tree and uncompresses them.

  OPTIONS
  -q          query rar files only.
USAGE_END

my %rarDirs;
my $queryOnly = 0;

main ();

#-----------------------------------------------------------------------------
#  processFile
#
#-----------------------------------------------------------------------------
sub processFile {
    # only process files
    if (!-f $_) { return; }

    my ($basename, $path);
    my $fname = $_;

    if (($fname =~ /\.rar$/)
        && ($File::Find::name !~ /\/\.torrents\//)
        && ($File::Find::name !~ /Books\//)
        && ($File::Find::name !~ /\/Music\//)
        && ($File::Find::name !~ /\/SW\//)
        && ($File::Find::name !~ /\/xbox\//)
        && ($File::Find::name !~ /\/XBOX\//)
        && ($File::Find::name !~ /\/CAILLOU\//))
    {
        ($basename, $path) = fileparse ($File::Find::name);

        #print $File::Find::name3 . ": " . $path . "/" . $basename . "\n";

        push (@{ $rarDirs{$path} }, $basename);
    }

    #$File::Find::prune = 0;
}

#-----------------------------------------------------------------------------
# main
#
# Iterate through all sub-directories
#-----------------------------------------------------------------------------
sub unrarFile {
    my $dir = shift;
    my $file = shift;

    if (!defined($dir) || !defined($file)) { return; }

    my $cmd = "cd \"" . $dir . "\" && nice /usr/bin/unrar e " . $file;

    # add error processing as above
    die "cannot fork: $!" unless defined($pid = open(KID_TO_READ, "-|"));

    if ($pid) {
        # parent
        while (<KID_TO_READ>) {
            chomp;
            if (($_ =~ /^Extracting/) || ($_ =~ /^ALL OK/)
               || ($_ =~ /^Unexpected end of archive$/)) {
                print $_ . "\n";
            }
        }
        close(KID_TO_READ) or warn "kid exited $?";

    } else {
        # child
        exec($cmd)  or die "can't exec program: $!";
    }
}

#-----------------------------------------------------------------------------
# main
#
# Iterate through all sub-directories
#-----------------------------------------------------------------------------
sub main {
    if (!GetOptions ('query' => \$queryOnly)) {
        die "ERROR: bad options in command line\n";
    }

    #if ($#ARGV < 1)
    #{
    #    die "$USAGE\n";
    #}

    my ($dir, $file);
    File::Find::find ( {wanted => \&processFile}, '.');

    if ($queryOnly) {
        foreach $dir (keys %rarDirs) {
            foreach $file (@{ $rarDirs {$dir} }) {
                print $dir . $file . "\n";
            }
        }
        return;
    }

    foreach $dir (keys %rarDirs) {
        my @files = @{ $rarDirs {$dir} };

        if ($#files == 0) {
            print "Extracting: " . $dir . $files[0] . "\n";
            unrarFile ($dir, $files[0]);
        }
        else {
            my @part01 = grep (/\.part01\.rar$/, @files);
            if ($#part01 == 0) {
                foreach $file (@part01) {
                    print "Extracting: " . $dir . $files[0] . "\n";
                    unrarFile ($dir, $part01[0]);
                }
            }
            else {
                print "Cannot handle multiples RAR files in Directory "
                    . $dir . "\n";
            }
        }
    }
}


1;

