#!/usr/local/bin/perl -w

#------------------------------------------------------------------------------
#
# To normalize WAV tracks use: normalize -vb TRACKS
#
#------------------------------------------------------------------------------

use Getopt::Std;
use CDDB;

my $HELP_STR = <<HELP_END;
Usage: $0 [OPTIONS] GENRE CDID LAME_GENRE YEAR

  Converts WAV files to MP3 with ID3 tags from freedb.org. CD has to be
  converted to an image using Clone CD, then coverted to WAV files using
  CDmage.

  OPTIONS
    -d    debug
    -s    Show freedb.org content.
    -h    Generates this text.
HELP_END

my %option;

getopts ('dgsh', \%option);

if ($option{'g'})
{
    system ('lame --genre-list');
    exit;
}

my $fnameFormat;
my $op = `ls`;
my @op = split ('\n', $op);
foreach (@op)
{
    if ($_ =~ /Unknown Artist - Unknown Title - \d+ - Track\d+.wav/)
    {
        $fnameFormat = 'eac';
    }

    if ($_ =~ /image-track-\d+-AUDIO-2352.wav/)
    {
        $fnameFormat = 'cdmage';
    }

    if ($_ =~ /track_\d+.wav/)
    {
        $fnameFormat = 'grip';
    }
}

if (! defined ($fnameFormat))
{
    die "ERROR: cannot find WAV files.\n";
}

my $fdbgenre = $ARGV [0];
my $cddbp_id = $ARGV [1];
my $genre    = $ARGV [2];
my $year     = $ARGV [3];
my $gap = 0;

if (!defined ($genre) || !defined ($cddbp_id))
{
    die $HELP_STR, "\n";
}

### Connect to the cddbp server.
my $cddbp = new CDDB( Host  => 'freedb.freedb.org', # default
                      Port  => 8880,                # default
                      Login => "nloyola"
                    ) or die $!;

### Query disc details (usually done with get_discs() information).
my $disc = $cddbp->get_disc_details($fdbgenre, $cddbp_id);

if (! defined ($disc))
{
    die "freedb info does not exist\n";
}

my $artist;
my $title;

($artist, $title) = split ("\\s+/\\s+", $disc->{dtitle} );

# sometimes freedb.org uses the '/' character in CD data
$artist =~ s|/|-|g;
$title =~ s|/|-|g;

if (defined $option {'s'})
{
    discInfoShow ($disc);
    exit;
}

my $lame_opts = "-b 192 -q 0 --add-id3v2";

my $id3tags_static = "--ta \"$artist\" --tl \"$title\"";

if (defined $genre)
{
    $id3tags_static .= " --tg \"" . $genre ."\"";
}

if (defined $year)
{
    $id3tags_static .= " --ty \"" . $year ."\"";
}

my @track_titles  = @{$disc->{'ttitles'}};
my $tnum;
my $i = 1;

foreach $tname (@track_titles)
  {
      $tname =~ s/:/ -/g;
      $tnum = sprintf ("%02d", $i);

      my $wavFname = baseFnameGet ($i) . ".wav";
      my $mp3Fname = $artist . " - " . $title . " - ". $tnum . " - "
                     . $tname . ".mp3";

      if (! (-e $wavFname)) { next; }
      if (-e $mp3Fname) { next; }

      $mp3Fname =~ s/\//-/g;
      $mp3Fname =~ s/\?//g;

      if ($option{'d'})
      {
          print "lame $lame_opts $id3tags_static "
                . " --tn \"$tnum\" --tt \"$tname\" "
                . "\"" . $wavFname . "\" \"" . $mp3Fname . "\"\n";
      }

      if (!$option{'d'})
      {
          system ("lame $lame_opts $id3tags_static "
                  . " --tn \"$tnum\" --tt \"$tname\" "
                . "\"" . $wavFname . "\" \"" . $mp3Fname . "\"");
      }

      $i++;
  }


sub discInfoShow
{
    my $disc_info = shift;

    if (!defined @{$disc_info->{offsets}})
    {
        printf STDERR "no disc information\n";
        return;
    }

    my $disc_time     = $disc_info->{'disc length'};
    my $disc_id       = $disc_info->{discid};
    my $disc_title    = $disc_info->{dtitle};

    my @track_offsets = @{$disc_info->{offsets}};
    my @track_seconds = @{$disc_info->{seconds}};
    my @track_titles  = @{$disc_info->{ttitles}};

    print "  artist:   ", $artist, "\n",
          "  title:    ", $title, "\n";
    $disc_time =~ s/\s+seconds$//g;
    print "  run time: ", int ($disc_time/60), ":", $disc_time%60, "\n";

    my $runTime = 0;
    my $i=0;
    foreach my $tname (@track_titles)
    {
        $tname =~ s/\//-/g;
        printf "  %3d - %-40.40s [%02d:%02d] [%02d:%02d]\n", $i+1, $tname,
            $track_seconds [$i] /60, $track_seconds [$i] % 60,
                $runTime / 60, $runTime % 60;
        $runTime += $track_seconds [$i] + $gap;
        $i++;
    }
}

sub baseFnameGet
{
    my $trackNum = shift;

    if ($fnameFormat eq 'eac')
    {
        return sprintf ("Unknown Artist - Unknown Title - %02d - Track%02d",
                       $trackNum, $trackNum);
    }
    elsif ($fnameFormat eq 'cdmage')
    {
        return sprintf ("image-track-%d-AUDIO-2352", $trackNum);
    }
    elsif ($fnameFormat eq 'grip')
    {
        return sprintf ("track_%02d", $trackNum);
    }
}
